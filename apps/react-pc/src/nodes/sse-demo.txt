# 前端开发技术指南

## 1. HTML 基础

### 1.1 语义化标签
- `<header>` - 页面头部
- `<nav>` - 导航栏
- `<main>` - 主要内容
- `<article>` - 文章内容
- `<section>` - 区块内容
- `<aside>` - 侧边栏
- `<footer>` - 页面底部

### 1.2 表单元素
```html
<form action="/submit" method="POST">
  <input type="text" name="username" placeholder="用户名">
  <input type="email" name="email" placeholder="邮箱">
  <button type="submit">提交</button>
</form>
```

## 2. CSS 样式

### 2.1 选择器
```css
/* 类选择器 */
.button { background: #007bff; }

/* ID选择器 */
#header { height: 60px; }

/* 属性选择器 */
input[type="text"] { border: 1px solid #ccc; }
```

### 2.2 Flexbox 布局
```css
.container {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}
```

### 2.3 Grid 布局
```css
.grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
}
```

## 3. JavaScript 核心

### 3.1 变量声明
```javascript
// ES6+ 语法
const PI = 3.14159;
let count = 0;
var oldWay = "legacy";

// 解构赋值
const { name, age } = user;
const [first, second] = array;
```

### 3.2 函数定义
```javascript
// 箭头函数
const add = (a, b) => a + b;

// 传统函数
function multiply(x, y) {
  return x * y;
}

// 默认参数
const greet = (name = 'World') => `Hello, ${name}!`;
```

### 3.3 异步编程
```javascript
// Promise
fetch('/api/data')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error(error));

// Async/Await
async function fetchData() {
  try {
    const response = await fetch('/api/data');
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error:', error);
  }
}
```

## 4. React 框架

### 4.1 组件定义
```jsx
// 函数组件
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

// 类组件
class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = { count: 0 };
  }
  
  render() {
    return (
      <div>
        <p>Count: {this.state.count}</p>
        <button onClick={() => this.setState({count: this.state.count + 1})}>
          Increment
        </button>
      </div>
    );
  }
}
```

### 4.2 Hooks 使用
```jsx
import React, { useState, useEffect } from 'react';

function Example() {
  const [count, setCount] = useState(0);
  
  useEffect(() => {
    document.title = `You clicked ${count} times`;
  }, [count]);
  
  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}
```

## 5. Vue.js 框架

### 5.1 组件结构
```vue
<template>
  <div class="hello">
    <h1>{{ msg }}</h1>
    <button @click="increment">Count: {{ count }}</button>
  </div>
</template>

<script>
export default {
  name: 'HelloWorld',
  props: {
    msg: String
  },
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      this.count++
    }
  }
}
</script>
```

### 5.2 Composition API
```vue
<script setup>
import { ref, onMounted } from 'vue'

const count = ref(0)
const increment = () => count.value++

onMounted(() => {
  console.log('Component mounted')
})
</script>
```

## 6. 构建工具

### 6.1 Webpack 配置
```javascript
module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js'
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader'
        }
      }
    ]
  }
}
```

### 6.2 Vite 配置
```javascript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    open: true
  }
})
```

## 7. 测试框架
结束